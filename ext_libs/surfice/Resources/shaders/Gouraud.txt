//pref
Ambient|float|0.0|0.5|1
Diffuse|float|0.0|0.7|1
Specular|float|0.0|0.2|1
Shininess|float|1|60|120
Blinn-Phong shading with Lambertian diffuse. Copyright 2015 Chris Rorden, BSD2clause.|note
//vert
#version 330
layout(location = 0) in vec3 Vert;
layout(location = 3) in vec3 Norm;
layout(location = 6) in vec4 Clr;
uniform mat4 ModelViewProjectionMatrix;
uniform mat4 ModelViewMatrix;
uniform mat3 NormalMatrix;
uniform vec3 LightPos = vec3(0.0, 20.0, 30.0);
uniform float Ambient = 0.5;
uniform float Diffuse = 0.7;
uniform float Specular = 0.2;
uniform float Shininess = 60.0;
out vec4 vClr;
void main() {
	vec3 vN, vL, vV;
	vec4 vP;
    vN = normalize((NormalMatrix * Norm));
    vP = vec4(Vert, 1.0);
    gl_Position = ModelViewProjectionMatrix * vec4(Vert, 1.0);
    vL = normalize(LightPos);
    vV = -vec3(ModelViewMatrix*vec4(Vert,1.0));
	
	vec3 l = normalize(vL);
	vec3 n = normalize(vN);
	vec3 h = normalize(l+normalize(vV));
	vec3 a = Clr.rgb * Ambient;
	vec3 d = Clr.rgb * dot(n,l) * Diffuse;
	float s = pow(max(0.0,dot(n,h)), Shininess) * Specular;
	vec3 backcolor =  (a - d) * 0.6;
	float backface = step(0.00, n.z);
	vClr = vec4(mix(backcolor.rgb, a + d + s,  backface), 1.0);

}
//frag
#version 330
in vec4 vClr;
out vec4 color;
void main() {
 color = vClr;
}